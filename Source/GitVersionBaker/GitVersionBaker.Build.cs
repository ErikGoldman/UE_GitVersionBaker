// Copyright Epic Games, Inc. All Rights Reserved.

using UnrealBuildTool;
using System.IO;
using System;

public class GitVersionBaker : ModuleRules
{
    public GitVersionBaker(ReadOnlyTargetRules Target) : base(Target)
    {
        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;

        PublicDependencyModuleNames.AddRange(new string[] { "Core" });
        PrivateDependencyModuleNames.AddRange(new string[] { "CoreUObject", "Engine" });

        GenerateVersionFile(Target);
    }

    // Helper function to run a command line process
    private string RunCommand(string command, string args)
    {
        System.Diagnostics.Process process = new System.Diagnostics.Process();
        process.StartInfo.FileName = command;
        process.StartInfo.Arguments = args;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.CreateNoWindow = true;
        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        process.WaitForExit();
        return output.Trim();
    }

    /// <summary>
    /// Generates the BakedGitVersion.h file.
    /// </summary>
    /// <remarks>
    /// This will generate a placeholder file if one doesn't exist to prevent compile errors.
    /// It will always generate a fresh file with current git info for non-editor (packaged) builds.
    /// It will do nothing if a file already exists for an editor build.
    /// </remarks>
    private void GenerateVersionFile(ReadOnlyTargetRules Target)
    {
        string versionHeaderPath = Path.Combine(ModuleDirectory, "Private", "BakedGitVersion.h");

        // If the file exists and it's an editor build, we shouldn't update
        if (File.Exists(versionHeaderPath) && Target.bBuildEditor) return;

        string gitHash;
        string buildTimestamp;
        string buildTypeMessage;

        // Determine the version details based on the build context.
        if (!Target.bBuildEditor)
        {
            // Packaged build: Get real Git info.
            buildTimestamp = DateTime.UtcNow.ToString("o"); // ISO 8601 format
            gitHash = "no-git-repo"; // Default value in case of failure

            try
            {
                string projectRoot = Path.GetFullPath(Path.Combine(ModuleDirectory, "..", "..", "..", ".."));
                gitHash = RunCommand("git", $"-C \"{projectRoot}\" rev-parse HEAD");
            }
            catch (Exception e)
            {
                Console.WriteLine($"Could not get Git hash. Is Git installed and is this a Git repository? Error: {e.Message}");
            }
        }
        else
        {
            // Editor build and file doesn't exist: Generate a placeholder.
            gitHash = "editor-placeholder";
            buildTimestamp = DateTime.UnixEpoch.ToString("o");
        }

        Console.WriteLine($"GitVersionBaker: Generating version file...");

        // Create the unified header content.
        string headerContent = $@"// Auto-generated by GitVersionBaker.Build.cs -- DO NOT EDIT
#pragma once

#define GAME_VERSION_HASH ""{gitHash}""
#define GAME_BUILD_TIMESTAMP ""{buildTimestamp}""
";

        // Write the content to the file in a single, final operation.
        try
        {
            Directory.CreateDirectory(Path.GetDirectoryName(versionHeaderPath));
            File.WriteAllText(versionHeaderPath, headerContent);
            Console.WriteLine($"GitVersionBaker: Successfully wrote version '{gitHash}' to {versionHeaderPath}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"GitVersionBaker: Failed to write version file. Error: {e.Message}");
        }
    }
}
