// Copyright Epic Games, Inc. All Rights Reserved.

using UnrealBuildTool;
using System.IO;
using System;

public class GitVersionBaker : ModuleRules
{
    public GitVersionBaker(ReadOnlyTargetRules Target) : base(Target)
    {
        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;

        PublicDependencyModuleNames.AddRange(new string[] { "Core" });
        PrivateDependencyModuleNames.AddRange(new string[] { "CoreUObject", "Engine" });

        GenerateVersionFile(Target);
    }

    // Helper function to run a command line process
    private string RunCommand(string command, string args)
    {
        System.Diagnostics.Process process = new System.Diagnostics.Process();
        process.StartInfo.FileName = command;
        process.StartInfo.Arguments = args;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.CreateNoWindow = true;
        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        process.WaitForExit();
        return output.Trim();
    }

    private void GenerateVersionFile(ReadOnlyTargetRules Target)
    {
        // Only generate a new version file for packaged, non-editor builds.
        if (Target.bBuildEditor)
        {
            return;
        }

        string versionHeaderPath = Path.Combine(ModuleDirectory, "Private", "StoredGitVersion.h");

        System.Console.WriteLine("Generating new version file for packaged build (GameVersion plugin)...");

        string gitHash = "no-git";
        string buildTimestamp = DateTime.UtcNow.ToString("o");


        try
        {
            // Get the short git hash. We assume the project root is a few levels up from the module.
            // This might need adjustment depending on your exact project structure.
            string projectRoot = Path.GetFullPath(Path.Combine(ModuleDirectory, "..", "..", "..", ".."));
            gitHash = RunCommand("git", $"-C \"{projectRoot}\" rev-parse --short HEAD");
        }
        catch (Exception e)
        {
            System.Console.WriteLine("Could not get Git hash. Is Git installed and is the project a Git repository? Error: " + e.Message);
        }

        string headerContent = $@"
// Version.h (Auto-generated by GitVersionBaker.Build.cs -- do not edit)
#pragma once

#define GAME_VERSION_HASH ""{gitHash}""
#define GAME_BUILD_TIMESTAMP ""{buildTimestamp}""
";

        try
        {
            File.WriteAllText(versionHeaderPath, headerContent.Trim());
            System.Console.WriteLine($"Successfully wrote version '{gitHash}' to {versionHeaderPath}");
        }
        catch (Exception e)
        {
            System.Console.WriteLine($"Failed to write version file. Error: {e.Message}");
        }
    }
}